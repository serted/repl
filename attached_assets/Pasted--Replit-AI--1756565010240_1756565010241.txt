### Финальный боевой промпт для Replit AI

Это не план и не обсуждение — это конкретное задание. В этом проекте нужно получить готовый, полностью автономный клон https://pc.dfbiu.com. Я приложил референс — текущую неполную копию (папка /dev/ с HTML/CSS/JS/assets), к которой мы пришли до этого момента. Ничего не придумывать и не менять по своему вкусу: нужны те же страницы, тот же функционал, тот же дизайн (пиксель в пиксель), тот же UI/UX и те же игры. Никаких лишних страниц, функций или элементов.

Для проверки поведения авторизованного пользователя используйте:
- login: test228
- pass: test228

---

### Цели

- Полный клон 1‑в‑1 с оригиналом, но полностью автономный на моём домене.
- Все страницы и модальные окна работают; все кнопки и формы кликабельны и корректно отрабатывают.
- Все ассеты собраны и доступны локально; отсутствие внешних запросов к pc.dfbiu.com.
- Фронтенд привязан к моему backend API для регистрации, авторизации и баланса.

---

### Контекст и проблемы сейчас

- Страницы частично не работают: модальные окна не открываются, кнопки не реагируют.
- Не все JS и изображения загружены; есть синтаксические ошибки в бандлах.
- Встречаются артефакты сборки Vite: экспорты, служебные хелперы и обрезанные конструкции.
- Источники изображений медленные; нужно использовать фото с https://apis.meishi.bet/ для ускорения.
- Нужна привязка к нашим API‑поинтам для суммы/баланса, регистрации и авторизации.

---

### Что нужно сделать в этом репозитории

#### 1) Починить фронтенд и сделать его автономным
- **Исправить синтаксис JS по всему /dev и /dev/assets:**
  - Удалить ESM‑экспорты/импорты, мешающие исполнению в браузере без бандлера.
  - Добавить безопасные заглушки для служебных Vite‑хелперов: __vite__mapDeps, __vite__preload.
  - Удалить/починить битые конструкции: g.;, $.;, t.;, последовательности вида “void 0;function …”.
  - Восстановить баланс скобок и кавычек; исключить “Unexpected token/identifier/end of input”.
- **Убрать зависимость от домена оригинала:**
  - Удалить проверки location.host/hostname/origin и любые ранние редиректы до монтирования приложения.
  - Переписать все пути к ассетам на локальные /dev/assets/.
- **Гарантировать монтирование UI:**
  - Любые ошибки API/логики не должны ломать app.mount("#app"); UI должен подниматься всегда.

#### 2) Собрать недостающие ассеты и оптимизировать изображения
- **Докачать всё, чего не хватает:**
  - HTML, CSS, JS, изображения, шрифты; положить в /dev/ и /dev/assets/ с сохранением структуры.
- **Изображения:**
  - Использовать источники фото с https://apis.meishi.bet/ для ускорения. Если эквивалент есть там — переписать src на apis.meishi.bet.
  - Если эквивалента нет — хранить локально в /dev/assets/.
  - Включить ленивую загрузку и современный формат (webp/avif) там, где это прозрачно для UI/UX.

#### 3) Привязать фронтенд к моему backend API
- **Эндпоинты:**
  - POST api/auth/register — регистрация.
  - POST api/auth/login — авторизация, ответ строго { access_token, expires_in }.
  - GET api/auth/me — профиль текущего пользователя.
  - GET api/system/config — конфиг (логотип, баннер и т.п.).
- **Токены/сессии:**
  - Хранение в cookie HttpOnly или Authorization Bearer — выбрать вариант, совместимый с текущим фронтендом (есть вызовы setToken/setExpires).
- **Баланс/сумма:**
  - Все отображения суммы/баланса привязать к моим API‑поинтам; никаких обращений к оригиналу.

#### 4) Реализовать минимальный backend и БД внутри проекта
- **Стек:** PHP 8.3 + SQLite (для скорости) или MySQL/MariaDB.
- **Таблицы:**
  - users(id, username UNIQUE, password_hash, nickname, balance DECIMAL, role, created_at, updated_at),
  - sessions(token, user_id FK, expires_at, created_at),
  - system_config(id=1, pc_logo, pc_login_banner, …).
- **Безопасность:** password_hash/password_verify, случайные токены, срок жизни, SameSite/HTTPS.

#### 5) Проверить и довести до пиксель‑перфекта
- **UI/UX:**
  - Пиксель‑в‑пиксель соответствие оригиналу на всех ключевых страницах.
  - Все модальные окна и их сценарии работают (открытие/закрытие/валидация).
  - Все кнопки кликабельны; формы отправляются и обрабатывают ошибки.
- **Авторизованный сценарий:**
  - Логин под test228/test228, пройтись по всем разделам; убедиться, что вид и поведение совпадают.
- **Консоль/сеть:**
  - В консоли нет ошибок (SyntaxError/ReferenceError/TypeError).
  - Во вкладке Network нет запросов к pc.dfbiu.com; все ассеты грузятся локально или с apis.meishi.bet для изображений.
- **Игры:**
  - Разделы игр и карточки видимы и кликабельны; интерфейс и модальные элементы ведут себя как на оригинале.

---

### Что создать/изменить в проекте

- **Файлы фронтенда:**
  - Обновлённые JS/CSS/HTML без ESM‑хвостов, без vite‑хелперов и битых конструкций.
  - Переписанные пути к ассетам; удалены внешние ссылки на pc.dfbiu.com.
- **API (PHP):**
  - /dev/api/auth/login.php, /dev/api/auth/register.php, /dev/api/auth/me.php, /dev/api/system/config.php, общий bootstrap с подключением к БД.
- **База:**
  - schema.sql и простой seed (опционально создать пользователя admin).
- **Админка:**
  - /dev/admin/ с входом для администратора и CRUD по пользователям (ник, баланс, роль).
- **Документация:**
  - README с инструкциями запуска, переменными окружения, командой и чек‑листом проверки.

---

### Запуск в Replit

- **Краулер/фиксер ассетов (если используете):**
  - Добавить скрипт tools/crawl-fix.js и команду запуска: node tools/crawl-fix.js
- **Backend (PHP сервер):**
  - Запуск: php -S 0.0.0.0:8000 -t dev
- **.replit:**
  - Добавить удобные команды запуска для обоих режимов (сначала краулер, потом PHP).
- **После внесения исправлений:**
  - Запустить PHP сервер и вручную проверить все страницы в публичном Replit URL в инкогнито.

---

### Критерии приёмки

- **Готовность:** сайт открывается, все страницы доступны и соответствуют оригиналу 1‑в‑1.
- **Функционал:** регистрация, авторизация, выход, профиль, баланс — через мой backend.
- **UI/UX:** все модальные окна и интерактивные элементы работают, анимации и стили идентичны.
- **Автономность:** никаких внешних запросов к pc.dfbiu.com; изображения — локально или через apis.meishi.bet; остальные ассеты локальные.
- **Чистота:** консоль без ошибок, 404 отсутствуют.

---

### Что вернуть в качестве результата

- **Обновлённые HTML/CSS/JS/ассеты** в /dev/.
- **Код backend** (PHP) и **админки** (/dev/admin).
- **SQL‑схема** БД (schema.sql) и инструкции инициализации.
- **README** с шагами запуска в Replit и на сервере, плюс чек‑лист тестирования.
- **Подтверждение проверки**: какие страницы и сценарии пройдены, где использован apis.meishi.bet для изображений, что именно переписано на локальные пути.

Сделайте все правки непосредственно в этом репозитории, запустите приложение в Replit, проверьте всё досконально (включая сценарии под пользователем test228/test228), и отдайте готовый автономный клон.